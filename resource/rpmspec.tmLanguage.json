{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "RPM Spec",
    "fileTypes": ["spec"],
    "scopeName": "source.spec",
    "uuid": "49e56b70-cf79-11e1-9b23-0800200c9a66",
    "patterns": [
        {
            "match": "(Icon|ExclusiveOs|ExcludeOs|Autoreq):",
            "name": "keyword.spec"
        },
        {
            "match": "(%package)\\s+(.*)",
            "captures": {
                "1": {
                    "name": "keyword.control.spec"
                },
                "2": {
                    "name": "string.quoted.spec"
                }
            }
        },
        {
            "begin": "%changelog",
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.spec"
                }
            },
            "end": "(?<=%)",
            "name": "string.html"
        },
        {
            "begin": "(%description)\\s*(?<packageName>.*)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.spec"
                },
                "2": {
                    "name": "entity.name.section.spec"
                }
            },
            "end": "(?=%)",
            "name": "string.html"
        },
        {
            "begin": "(Content|BuildArch|BuildArchitectures|ExclusiveArch|ExcludeArch):",
            "beginCaptures": {
                "0": {
                    "name": "keyword.spec"
                }
            },
            "end": "$",
            "patterns": [
                {
                    "include": "#archShortcuts"
                },
                {
                    "include": "#archValues"
                }
            ]
        },
        {
            "begin": "(Conflicts|Obsoletes|Provides|Requires|Requires\\(.*\\)|Enhances|Suggests|BuildConflicts|BuildRequires|Recommends|PreReq|Supplements):",
            "beginCaptures": {
                "1": {
                    "name": "keyword.spec"
                }
            },
            "end": "$",
            "patterns": [
                {
                    "include": "#logicalOperators"
                },
                {
                    "include": "#globalVariable"
                },
                {
                    "include": "#stringValue"
                }
            ]
        },
        {
            "match": "(Epoch|Serial|Nosource|Nopatch):",
            "name": "keyword.spec"
        },
        {
            "match": "(AutoReq|AutoProv|AutoReqProv):",
            "name": "keyword.spec"
        },
        {
            "begin": "(Name|Version|Release|Url|URL|Copyright|License|Summary|Summary\\(.*\\)|Distribution|Vendor|Packager|Group|Source\\d*|Patch\\d*|BuildRoot|Prefix):",
            "beginCaptures": {
                "1": {
                    "name": "keyword.spec"
                }
            },
            "end": "$",
            "contentName": "string.quoted.spec",
            "patterns": [
                {
                    "include": "#numericConstant"
                },
                {
                    "include": "#globalVariable"
                }
            ]
        },
        {
            "match": "^# norootforbuild",
            "name": "keyword.spec"
        },
        {
            "begin": "(%global)\\s+([^\\s]+)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.spec"
                },
                "2": {
                    "name": "variable.name.spec"
                }
            },
            "end": "$",
            "patterns": [
                {
                    "include": "#logicalOperators"
                },
                {
                    "include": "#globalVariable"
                },
                {
                    "include": "#stringValue"
                },
                {
                    "include": "#numericConstant"
                }
            ]
        },
        {
            "begin": "(%undefine)\\s+([^\\s]+)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.spec"
                },
                "2": {
                    "name": "variable.name.spec"
                }
            },
            "end": "$",
            "patterns": [
                {
                    "match": ".*",
                    "name": "invalid.illegal.spec"
                }
            ]
        },
        {
            "begin": "%(ifarch|ifnarch)",
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.spec"
                }
            },
            "end": "$",
            "patterns": [
                {
                    "include": "#globalVariable"
                },
                {
                    "include": "#archShortcuts"
                },
                {
                    "include": "#archValues"
                }
            ],
            "contentName": "invalid.illegal.spec"
        },
        {
            "begin": "%(if)\\b",
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.spec"
                }
            },
            "end": "$",
            "patterns": [
                {
                    "include": "#logicalOperators"
                },
                {
                    "include": "#globalVariable"
                },
                {
                    "include": "#numericConstant"
                }
            ]
        },
        {
            "match": "^%(check$|files)",
            "name": "keyword.control.spec"
        },
        {
            "match": "^(%(prep$|build$|install$|clean$|(pre|post)(un|trans)?|trigger(in|un|postun)|verifyscript))",
            "name": "keyword.control.spec"
        },
        {
            "match": "%(else|endif|define|undefine|ifos|ifnos)",
            "name": "keyword.control.spec"
        },
        {
            "begin": "%\\{",
            "end": "\\}",
            "name": "variable.name.spec"
        },
        {
            "match": "%([A-Za-z0-9_]+)",
            "name": "keyword.spec"
        },
        {
            "match": "^\\s*#.*$",
            "name": "comment.line.spec"
        },
        {
            "match": "^\\* .*\\)$",
            "name": "meta.documentation.spec"
        }
    ],
    "repository": {
        "archValues": {
            "match": "\\b(aarch64|alpha|alphaev5|alphaev56|alphaev6|alphaev67|alphapca56|amd64|armv3l|armv4b|armv4l|armv5tejl|armv5tel|armv5tl|armv6hl|armv6l|armv7hl|armv7hnl|armv7l|armv8hl|armv8l|athlon|em64t|geode|i370|i386|i486|i586|i686|ia32e|ia64|loongarch64|m68k|m68kmint|mips|mips64|mips64el|mips64r6|mips64r6el|mipsel|mipsr6|mipsr6el|pentium3|pentium4|ppc|ppc32dy4|ppc64|ppc64iseries|ppc64le|ppc64p7|ppc64pseries|ppc8260|ppc8560|ppciseries|ppcpseries|riscv64|rs6000|s390|s390x|sgi|sh|sh3|sh4|sh4a|sparc|sparc64|sparc64v|sparcv8|sparcv9|sparcv9v|x86_64|x86_64_v2|x86_64_v3|x86_64_v4|xtensa)\\b",
            "name": "constant.language.spec"
        },
        "archShortcuts": {
            "match": "%\\{(alpha|arm|arm32|arm64|ix86|loongarch64|mips|mips32|mips64|mipseb|mipsel|power64|riscv128|riscv32|sparc|x86_64)\\}",
            "name": "constant.language.spec"
        },
        "globalVariable": {
            "begin": "([\\w]*)(%\\{)",
            "beginCaptures": {
                "1": {
                    "name": "string.quoted.spec"
                },
                "2": {
                    "name": "keyword.operator.macro.spec"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "keyword.operator.macro.spec"
                }
            },
            "patterns": [
                {
                    "match": "\\?",
                    "name": "keyword.operator.ternary.spec"
                },
                {
                    "match": "([\\w]+)",
                    "name": "variable.name.spec"
                },
                {
                    "match": "(:)([\\w]+)",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.ternary.spec"
                        },
                        "2": {
                            "name": "string.quoted.spec"
                        }
                    }
                }
            ]
        },
        "logicalOperators": {
            "match": "<=|>=|==|!=|&&|\\|\\|<|>",
            "name": "keyword.operator.logical.spec"
        },
        "numericConstant": {
            "match": "\\b([0-9]+)\\b",
            "name": "constant.numeric.spec"
        },
        "stringValue": {
            "match": "\\b(?![0-9]+$)([\\S]+)\\b",
            "name": "string.quoted.spec"
        }
    }
}
